@page "/add_student"
@page "/update_student/{StudentId:int}"

@using Blazor123.Application.Services.Interfaces
@using Blazor123.Application.DTO

@inject IStudentService _studentService;
<h3>AddUpdateStudent</h3>
<h3>SUEIFHSFHSDIFHSIFHSIDFHDSIUHFSDUIHFIUDSHFIUHSUIFHIUH</h3>
<div class="form-group">
    <label>First Name</label>
    <input @bind="firstName" class="form-control" placeholder="First Name">
</div>
<div class="mt-2 form-group">
    <label>Last Name</label>
    <input @bind="lastName" class="form-control" placeholder="Last Name">
</div>


<div class="mt-2 form-group">
    <label>Email address</label>
    <input @bind="email" type="email" class="form-control" placeholder="Email">
</div>

<div class="mt-2 form-group">
    <label>Gender</label>
    <div class=" d-flex flex-row">
        <div class="col-6 d-flex justify-content-between">
            <div class="form-check">
                <input checked="@(gender=="Male")" @onchange="@(()=> setGender("Male"))" class="form-check-input" type="radio" name="flexRadioDefault">
                <label class="form-check-label" for="flexRadioDefault1">
                    Male
                </label>
            </div>
            <div class="form-check">
                <input checked="@(gender=="Female")" @onchange="@(()=> setGender("Female"))" class="form-check-input" type="radio" name="flexRadioDefault">
                <label class="form-check-label" for="flexRadioDefault2">
                    Female
                </label>
            </div>
        </div>
    </div>
</div>

<button type="submit" @onclick="AddStudentRecord" class="mt-2 btn btn-primary">Submit</button>


@code {
    [Parameter]
    public int StudentId { get; set; }

    private string firstName;
    private string lastName;
    private string email;
    private string gender;

    private void setGender(string gender)
    {
        this.gender = gender;
    }

    protected async override Task OnInitializedAsync()
    {

        if (StudentId > 0)
        {
            var response = await _studentService.GetStudentById(StudentId);
            if (response != null)
            {
                firstName = response.FirstName;
                lastName = response.LastName;
                email = response.Email;
                gender = response.Gender;

            }
        }
    }

    private async void AddStudentRecord()
    {
        var studentModel = new StudentDto
            {

                FirstName = firstName,
                LastName = lastName,
                Email = email,
                Gender = gender,
                StudentId = StudentId
            };

        int response = -1;
        if (StudentId > 0)
        {
            response = await _studentService.UpdateStudent(studentModel);
        }
        else
        {
             response = await _studentService.AddStudent(studentModel);
        }

       

        if (response > 0)
        {
            firstName = lastName = email = gender = "";
            this.StateHasChanged();
            await App.Current.MainPage.DisplayAlert("success", "added", "ok");

        }
        else
        {
            await App.Current.MainPage.DisplayAlert("fail", "not added", "ok");

        }
    }
}
